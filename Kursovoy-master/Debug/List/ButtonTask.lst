###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         30/May/2020  14:40:50
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  C:\Kod_Kurs\Kurs\Kursovoy-master\AHardware\ButtonTask.cpp
#    Command line =
#        -f C:\Users\User\AppData\Local\Temp\EWD2D2.tmp
#        (C:\Kod_Kurs\Kurs\Kursovoy-master\AHardware\ButtonTask.cpp -lC
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Debug\List -lA
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Debug\List -o
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Rtos\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Rtos\wrapper\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Rtos\wrapper\FreeRtos\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Rtos\FreeRtos\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Rtos\FreeRtos\include\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Rtos\FreeRtos\portable\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Rtos\FreeRtos\portable\Common\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Rtos\FreeRtos\portable\IAR\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Rtos\FreeRtos\portable\IAR\ARM_CM4F\
#        -I C:\Kod_Kurs\Kurs\Kursovoy-master\Rtos\FreeRtos\portable\MemMang\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\MyTask\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Common\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\CMSIS\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Application\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\Application\Diagnostic\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\AHardware\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\AHardware\GpioPort\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\AHardware\IrqController\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\..\CortexLib-master\AbstractHardware\Pin\
#        -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\..\CortexLib-master\AbstractHardware\Registers\STM32F411\FieldValues\
#        -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\..\CortexLib-master\AbstractHardware\Registers\STM32F411\
#        -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\..\CortexLib-master\AbstractHardware\Registers\
#        -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\..\CortexLib-master\AbstractHardware\Port\
#        -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\..\CortexLib-master\AbstractHardware\Atomic\
#        -I C:\Kod_Kurs\Kurs\Kursovoy-master\..\CortexLib-master\Common\ -I
#        C:\Kod_Kurs\Kurs\Kursovoy-master\..\CortexLib-master\Common\Singleton\
#        -Ol --c++ --no_exceptions --no_rtti)
#    Locale       =  C
#    List file    =  C:\Kod_Kurs\Kurs\Kursovoy-master\Debug\List\ButtonTask.lst
#    Object file  =  C:\Kod_Kurs\Kurs\Kursovoy-master\Debug\Obj\ButtonTask.o
#
###############################################################################

C:\Kod_Kurs\Kurs\Kursovoy-master\AHardware\ButtonTask.cpp
      1          #include "ButtonTask.hpp"

   \                                 In section .text, align 2
   \   __interwork __vfp OsWrapper::TicksPerSecond std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
   \                     _ZNSt6chrono13duration_castINS_8durationIjSt5ratioILx10ELx1000EEEExS2_ILx1ELx1000EEEENSt9enable_ifIXsr3std6chrono12_Is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
   \        0x2   0x....'....        BL       _ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv
   \        0x6   0x220A             MOVS     R2,#+10
   \        0x8   0x2300             MOVS     R3,#+0
   \        0xA   0x....'....        BL       __aeabi_ldivmod
   \        0xE   0x9001             STR      R0,[SP, #+4]
   \       0x10   0xA901             ADD      R1,SP,#+4
   \       0x12   0x4668             MOV      R0,SP
   \       0x14   0x....'....        BL       _ZNSt6chrono8durationIjSt5ratioILx10ELx1000EEEC1IjvEERKT_
   \       0x18   0x9800             LDR      R0,[SP, #+0]
   \       0x1A   0xBD0E             POP      {R1-R3,PC}       ;; return

   \                                 In section .text, align 2
   \   __code __interwork __vfp std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::duration<uint32_t, void>(uint32_t const &)
   \                     _ZNSt6chrono8durationIjSt5ratioILx10ELx1000EEEC1IjvEERKT_: (+1)
   \        0x0   0x6809             LDR      R1,[R1, #+0]
   \        0x2   0x6001             STR      R1,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __vfp __int64_t std::chrono::duration<__int64_t, std::milli>::count() const
   \                     _ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv: (+1)
   \        0x0   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __vfp uint32_t std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::count() const
   \                     _ZNKSt6chrono8durationIjSt5ratioILx10ELx1000EEE5countEv: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x4770             BX       LR               ;; return

   \                                 In section .rodata, align 1
   \   __absolute bool const std::chrono::system_clock::is_steady
   \                     _ZNSt6chrono12system_clock9is_steadyE:
   \        0x0   0x00               DC8 0

   \                                 In section .rodata, align 1
   \   __absolute bool const std::chrono::system_clock::is_monotonic
   \                     _ZNSt6chrono12system_clock12is_monotonicE:
   \        0x0   0x00               DC8 0

   \                                 In section .rodata, align 1
   \   __absolute bool const std::chrono::steady_clock::is_steady
   \                     _ZNSt6chrono12steady_clock9is_steadyE:
   \        0x0   0x01               DC8 1

   \                                 In section .text, align 2
   \   __interwork __vfp void OsWrapper::RtosWrapper::wSleep(uint32_t)
   \                     _ZN9OsWrapper11RtosWrapper6wSleepEj: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....'....        BL       vTaskDelay
   \        0x6   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4
   \   __interwork __vfp void OsWrapper::RtosWrapper::wSignalEvent(void * const &, uint32_t)
   \                     _ZN9OsWrapper11RtosWrapper12wSignalEventERKPvj: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x000A             MOVS     R2,R1
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x9100             STR      R1,[SP, #+0]
   \        0x8   0x466B             MOV      R3,SP
   \        0xA   0x6801             LDR      R1,[R0, #+0]
   \        0xC   0x4808             LDR.N    R0,??wSignalEvent_0
   \        0xE   0x....'....        BL       xTimerPendFunctionCallFromISR
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD00A             BEQ.N    ??wSignalEvent_1
   \       0x16   0x9800             LDR      R0,[SP, #+0]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD007             BEQ.N    ??wSignalEvent_1
   \       0x1C   0xF05F 0x5080      MOVS     R0,#+268435456
   \       0x20   0x4904             LDR.N    R1,??wSignalEvent_0+0x4  ;; 0xe000ed04
   \       0x22   0x6008             STR      R0,[R1, #+0]
   \       0x24   0xF3BF 0x8F4F      DSB      SY
   \       0x28   0xF3BF 0x8F6F      ISB      SY
   \                     ??wSignalEvent_1: (+1)
   \       0x2C   0xBD01             POP      {R0,PC}          ;; return
   \       0x2E   0xBF00             Nop      
   \                     ??wSignalEvent_0:
   \       0x30   0x....'....        DC32     vEventGroupSetBitsCallback
   \       0x34   0xE000'ED04        DC32     0xe000ed04

   \                                 In section .text, align 2
   \   __code __interwork __vfp OsWrapper::IThread::subobject IThread()
   \                     _ZN9OsWrapper7IThreadC2Ev: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....'....        BL       _ZN9OsWrapper7IThreadC1Ev
   \        0x6   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __code __interwork __vfp OsWrapper::IThread::IThread()
   \                     _ZN9OsWrapper7IThreadC1Ev: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6541             STR      R1,[R0, #+84]
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x6581             STR      R1,[R0, #+88]
   \        0x8   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __vfp void OsWrapper::IThread::Sleep(std::chrono::milliseconds)
   \                     _ZN9OsWrapper7IThread5SleepENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE: (+1)
   \        0x0   0xB583             PUSH     {R0,R1,R7,LR}
   \        0x2   0xB082             SUB      SP,SP,#+8
   \        0x4   0xA802             ADD      R0,SP,#+8
   \        0x6   0x....'....        BL       _ZNSt6chrono13duration_castINS_8durationIjSt5ratioILx10ELx1000EEEExS2_ILx1ELx1000EEEENSt9enable_ifIXsr3std6chrono12_Is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE
   \        0xA   0x9000             STR      R0,[SP, #+0]
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x....'....        BL       _ZNKSt6chrono8durationIjSt5ratioILx10ELx1000EEE5countEv
   \       0x12   0x....'....        BL       _ZN9OsWrapper11RtosWrapper6wSleepEj
   \       0x16   0xB005             ADD      SP,SP,#+20
   \       0x18   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2
   \   __code __interwork __vfp OsWrapper::Thread<512U>::subobject Thread()
   \                     _ZN9OsWrapper6ThreadILj512EEC2Ev: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....'....        BL       _ZN9OsWrapper6ThreadILj512EEC1Ev
   \        0x6   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __code __interwork __vfp OsWrapper::Thread<512U>::Thread()
   \                     _ZN9OsWrapper6ThreadILj512EEC1Ev: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x....'....        BL       _ZN9OsWrapper7IThreadC2Ev
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __vfp void OsWrapper::Event::Signal()
   \                     _ZN9OsWrapper5Event6SignalEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x6A01             LDR      R1,[R0, #+32]
   \        0x4   0x....'....        BL       _ZN9OsWrapper11RtosWrapper12wSignalEventERKPvj
   \        0x8   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __vfp bool MyPin<GPIOC, 13U>::IsSet()
   \                     _ZN5MyPinI5GPIOCLj13EE5IsSetEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....'....        BL       _ZN12RegisterBaseILj1073874960ELj32E8ReadModeE3GetIS0_vEEjv
   \        0x6   0x0B40             LSRS     R0,R0,#+13
   \        0x8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \        0xC   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 4
   \   __interwork __vfp uint32_t RegisterBase<1073874960U, 32U, ReadMode>::Get<ReadMode, void>()
   \                     _ZN12RegisterBaseILj1073874960ELj32E8ReadModeE3GetIS0_vEEjv: (+1)
   \        0x0   0x4801             LDR.N    R0,??Get_0       ;; 0x40020810
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
   \        0x6   0xBF00             Nop      
   \                     ??Get_0:
   \        0x8   0x4002'0810        DC32     0x40020810

   \                                 In section .text, align 2
   \   __interwork __vfp bool Button<MyPin<GPIOC, 13U>>::IsPushed()
   \                     _ZN6ButtonI5MyPinI5GPIOCLj13EEE8IsPushedEv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....'....        BL       _ZN5MyPinI5GPIOCLj13EE5IsSetEv
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD101             BNE.N    ??IsPushed_0
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE000             B.N      ??IsPushed_1
   \                     ??IsPushed_0: (+1)
   \        0xE   0x2000             MOVS     R0,#+0
   \                     ??IsPushed_1: (+1)
   \       0x10   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x12   0xBD02             POP      {R1,PC}          ;; return
      2          

   \                                 In section .text, align 2, keep-with-next
      3          void ButtonTask::Execute()
      4          {
   \                     _ZN10ButtonTask7ExecuteEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
      5            for(;;)
      6            {
      7              if (UserButton.IsPushed())
   \                     ??Execute_0: (+1)
   \        0x4   0xF604 0x005C      ADDW     R0,R4,#+2140
   \        0x8   0x....'....        BL       _ZN6ButtonI5MyPinI5GPIOCLj13EEE8IsPushedEv
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD003             BEQ.N    ??Execute_1
      8              {
      9                myEvent.Signal();
   \       0x10   0xF8D4 0x0860      LDR      R0,[R4, #+2144]
   \       0x14   0x....'....        BL       _ZN9OsWrapper5Event6SignalEv
   \                     ??Execute_1: (+1)
   \       0x18   0x....             LDR.N    R2,??DataTable2
   \       0x1A   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
     10              }
     11              Sleep(300ms);
   \       0x1E   0x....'....        BL       _ZN9OsWrapper7IThread5SleepENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE
   \       0x22   0xE7EF             B.N      ??Execute_0
     12            }
     13          }
     14          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __vfp ButtonTask::subobject ButtonTask(OsWrapper::Event &)
   \                     _ZN10ButtonTaskC2ERN9OsWrapper5EventE: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....'....        BL       _ZN10ButtonTaskC1ERN9OsWrapper5EventE
   \        0x6   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     15          ButtonTask::ButtonTask(OsWrapper::Event& event): myEvent(event)
     16          {
   \                     _ZN10ButtonTaskC1ERN9OsWrapper5EventE: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x....'....        BL       _ZN9OsWrapper6ThreadILj512EEC2Ev
   \        0xC   0x....             LDR.N    R0,??DataTable2_1
   \        0xE   0x6020             STR      R0,[R4, #+0]
   \       0x10   0xF8C4 0x5860      STR      R5,[R4, #+2144]
     17          }
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0xBD32             POP      {R1,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     _ZTV10ButtonTask+0x8

   \                                 In section .rodata, align 8
   \                     ?_0:
   \        0x0   0x0000'0000'0      DC64 300
   \              000'012C     
     18          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Button<MyPin<GPIOC, 13U>>::IsPushed()
         8   -> MyPin<GPIOC, 13U>::IsSet()
      16   ButtonTask::ButtonTask(OsWrapper::Event &)
        16   -> OsWrapper::Thread<512U>::subobject Thread()
       8   ButtonTask::Execute()
         8   -> Button<MyPin<GPIOC, 13U>>::IsPushed()
         8   -> OsWrapper::Event::Signal()
         8   -> OsWrapper::IThread::Sleep(std::chrono::milliseconds)
       8   ButtonTask::subobject ButtonTask(OsWrapper::Event &)
         8   -> ButtonTask::ButtonTask(OsWrapper::Event &)
       8   MyPin<GPIOC, 13U>::IsSet()
         8   -> RegisterBase<1073874960U, 32U, ReadMode>::Get<ReadMode, void>()
       8   OsWrapper::Event::Signal()
         8   -> OsWrapper::RtosWrapper::wSignalEvent(void * const &, uint32_t)
       0   OsWrapper::IThread::IThread()
      24   OsWrapper::IThread::Sleep(std::chrono::milliseconds)
        24   -> OsWrapper::RtosWrapper::wSleep(uint32_t)
        24   -> std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::count() const
        24   -> std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
       8   OsWrapper::IThread::subobject IThread()
         8   -> OsWrapper::IThread::IThread()
       8   OsWrapper::RtosWrapper::wSignalEvent(void * const &, uint32_t)
         8   -> xTimerPendFunctionCallFromISR
       8   OsWrapper::RtosWrapper::wSleep(uint32_t)
         8   -> vTaskDelay
       8   OsWrapper::Thread<512U>::Thread()
         8   -> OsWrapper::IThread::subobject IThread()
       8   OsWrapper::Thread<512U>::subobject Thread()
         8   -> OsWrapper::Thread<512U>::Thread()
       0   RegisterBase<1073874960U, 32U, ReadMode>::Get<ReadMode, void>()
       0   std::chrono::duration<__int64_t, std::milli>::count() const
       0   std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::count() const
       0   std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::duration<uint32_t, void>(uint32_t const &)
      16   std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
        16   -> std::chrono::duration<__int64_t, std::milli>::count() const
        16   -> std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::duration<uint32_t, void>(uint32_t const &)
        16 __aeabi_ldivmod


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       8  ?_0
      20  Button<MyPin<GPIOC, 13U>>::IsPushed()
      24  ButtonTask::ButtonTask(OsWrapper::Event &)
      36  ButtonTask::Execute()
       8  ButtonTask::subobject ButtonTask(OsWrapper::Event &)
      14  MyPin<GPIOC, 13U>::IsSet()
      10  OsWrapper::Event::Signal()
      10  OsWrapper::IThread::IThread()
      26  OsWrapper::IThread::Sleep(std::chrono::milliseconds)
       8  OsWrapper::IThread::subobject IThread()
      56  OsWrapper::RtosWrapper::wSignalEvent(void * const &, uint32_t)
       8  OsWrapper::RtosWrapper::wSleep(uint32_t)
      14  OsWrapper::Thread<512U>::Thread()
       8  OsWrapper::Thread<512U>::subobject Thread()
      12  RegisterBase<1073874960U, 32U, ReadMode>::Get<ReadMode, void>()
       6  std::chrono::duration<__int64_t, std::milli>::count() const
       4  std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::count() const
       6  std::chrono::duration<uint32_t, std::ratio<10LL, 1000LL>>::duration<uint32_t, void>(uint32_t const &)
      28  std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
       1  std::chrono::steady_clock::is_steady
       1  std::chrono::system_clock::is_monotonic
       1  std::chrono::system_clock::is_steady
     136  -- Other

 
 147 bytes in section .rodata
 306 bytes in section .text
 
 76 bytes of CODE  memory (+ 230 bytes shared)
  8 bytes of CONST memory (+ 139 bytes shared)

Errors: none
Warnings: none
